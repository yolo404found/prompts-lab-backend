version: '3.8'

services:
  # Backend API
  api:
    build:
      context: .
      target: development
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - LOG_LEVEL=debug
      # Database (using local PostgreSQL for development)
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/prompt_formatter
      - SUPABASE_SERVICE_ROLE_KEY=local_development_key
      # JWT (for development only - change in production)
      - JWT_SECRET=development_jwt_secret_key_32_chars_long
      # Notion (configure these for testing)
      - NOTION_CLIENT_ID=${NOTION_CLIENT_ID:-}
      - NOTION_CLIENT_SECRET=${NOTION_CLIENT_SECRET:-}
      - NOTION_REDIRECT_URI=http://localhost:3000/api/notion/oauth/callback
      # Encryption (for development only - change in production)
      - ENCRYPTION_KEY=1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - db
    networks:
      - prompt-formatter-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (for local development)
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=prompt_formatter
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    networks:
      - prompt-formatter-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d prompt_formatter"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for caching and rate limiting in production)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - prompt-formatter-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin (for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@promptformatter.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - prompt-formatter-network
    restart: unless-stopped

  # Mailhog (for email testing in development)
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - prompt-formatter-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  prompt-formatter-network:
    driver: bridge

# Development overrides
x-development: &development
  api:
    build:
      target: development
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug

# Production overrides
x-production: &production
  api:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

# Profiles for different environments
profiles:
  development:
    <<: *development
  
  production:
    <<: *production
    # Remove development services
    services:
      api:
        <<: *production
      db:
        image: postgres:15-alpine
        environment:
          - POSTGRES_DB=${POSTGRES_DB}
          - POSTGRES_USER=${POSTGRES_USER}
          - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        volumes:
          - postgres_data:/var/lib/postgresql/data
        networks:
          - prompt-formatter-network
        restart: always
      redis:
        image: redis:7-alpine
        volumes:
          - redis_data:/data
        networks:
          - prompt-formatter-network
        restart: always
